{"version":3,"file":"static/js/26.3df10f1c.chunk.js","mappings":"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","sources":["components/LoginForm/LoginSchema.js","webpack://react-homework-template/./src/components/LoginForm/loginForm.module.scss?0f87","components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterSchema.js","webpack://react-homework-template/./src/components/RegisterForm/registerForm.module.scss?85e2","components/RegisterForm/RegisterForm.jsx","components/forgetPass/forgetPassShema.js","webpack://react-homework-template/./src/components/forgetPass/forgetPass.module.scss?81fd","components/forgetPass/forgetPass.jsx","webpack://react-homework-template/./src/pages/auth/auth.module.scss?2cc4","components/resetePassword/resetePasswordShema.js","webpack://react-homework-template/./src/components/resetePassword/resetePassword.module.scss?1b4b","components/resetePassword/resetePassword.jsx","pages/auth/Auth.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я0-9._%+-]+@[a-zA-Zа-яА-Я0-9.-]+\\.[a-zA-Zа-яА-Я]{2,}$/,\n      'Invalid email format'\n    )\n    .required('Email is required'),\n  password: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+,-./:;<=>?@[\\]^_`{|}~]+$/,\n      'Invalid password format'\n    )\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be at most 64 characters')\n    .required('Password is required'),\n});\n\nexport default LoginSchema;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"loginForm_formContainer__oo9nh\",\"formNav\":\"loginForm_formNav__+UHha\",\"register\":\"loginForm_register__T0KTt\",\"forgetPass\":\"loginForm_forgetPass__GoPW9\",\"login\":\"loginForm_login__ov0uC\",\"inputContainer\":\"loginForm_inputContainer__o1zlG\",\"password\":\"loginForm_password__2FwjM\",\"passwordEye\":\"loginForm_passwordEye__MGAoG\",\"logInButton\":\"loginForm_logInButton__xNZDc\",\"errmes\":\"loginForm_errmes__p36mi\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { toast } from 'react-toastify';\nimport LoginSchema from './LoginSchema';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../components/icon/Icon';\nimport css from './loginForm.module.scss';\nimport { loginUser } from 'redux/auth/auth-operation';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = async (user, { resetForm }) => {\n    try {\n      const response = await dispatch(loginUser(user));\n      const data = response.payload;\n\n      if (data && data.token) {\n        resetForm();\n      } else {\n        toast.error('Incorrect email or password provided');\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{ email: '', password: '' }}\n      validationSchema={LoginSchema}\n    >\n      <Form className={css.formContainer}>\n        <div className={css.formNav}>\n          <Link className={css.register} to=\"register\" underline=\"none\">\n            Registration\n          </Link>\n          <Link className={css.login} to=\"login\" underline=\"none\">\n            Log In\n          </Link>\n        </div>\n        <div className={css.inputContainer}>\n          <Field name=\"email\" type=\"email\" placeholder=\"Enter your email\" />\n          <ErrorMessage className={css.errmes} name=\"email\" component=\"div\" />\n          <div className={css.password}>\n            <Field\n              name=\"password\"\n              type={showPassword ? 'text' : 'password'}\n              placeholder=\"Confirm a password\"\n            />\n\n            <ErrorMessage\n              className={css.errmes}\n              name=\"password\"\n              component=\"div\"\n            />\n            <span className={css.passwordEye} onClick={toggleShowPassword}>\n              {showPassword ? (\n                <Icon id=\"eye-off\" width=\"18\" height=\"18\"></Icon>\n              ) : (\n                <Icon id=\"eye\" width=\"18\" height=\"18\"></Icon>\n              )}\n            </span>\n          </div>{' '}\n          <Link className={css.forgetPass} to=\"forgetPassword\">\n            Forget password\n          </Link>\n        </div>\n        <button className={css.logInButton} type=\"submit\">\n          Log In Now\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import * as Yup from 'yup';\n\nconst RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .min(2, 'Name must be at least 2 characters')\n    .max(15, 'Name must be at most 15 characters')\n    .required('Name is required'),\n  email: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я0-9._%+-]+@[a-zA-Zа-яА-Я0-9.-]+\\.[a-zA-Zа-яА-Я]{2,}$/,\n      'Invalid email format'\n    )\n    .required('Email is required'),\n  password: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+,-./:;<=>?@[\\]^_`{|}~]+$/,\n      'Invalid password format'\n    )\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be at most 64 characters')\n    .required('Password is required'),\n});\n\nexport default RegisterSchema;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"registerForm_formContainer__qazKf\",\"formNav\":\"registerForm_formNav__r5N+g\",\"register\":\"registerForm_register__-qbHt\",\"login\":\"registerForm_login__F0xNw\",\"inputContainer\":\"registerForm_inputContainer__fgvAe\",\"password\":\"registerForm_password__M74nK\",\"passwordEye\":\"registerForm_passwordEye__q-RMR\",\"registerButton\":\"registerForm_registerButton__eA4sZ\",\"errmes\":\"registerForm_errmes__bbQBu\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { toast } from 'react-toastify';\nimport RegisterSchema from './RegisterSchema';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../components/icon/Icon';\nimport css from './registerForm.module.scss';\nimport { registerUser } from 'redux/auth/auth-operation';\n\nconst RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (newUser, { resetForm }) => {\n    try {\n      const response = await dispatch(registerUser(newUser));\n      const data = response.payload.user;\n\n      if (data) {\n        toast.success('Welcome to Task Pro! Your registration was successful');\n        resetForm();\n      } else {\n        toast.error(\n          'Oops! Something went wrong during registration. Please double-check your information and try again'\n        );\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{ name: '', email: '', password: '' }}\n      validationSchema={RegisterSchema}\n    >\n      <Form className={css.formContainer}>\n        <div className={css.formNav}>\n          <Link className={css.register} to=\"register\" underline=\"none\">\n            Registration\n          </Link>\n          <Link className={css.login} to=\"login\" underline=\"none\">\n            Log In\n          </Link>\n        </div>\n        <div className={css.inputContainer}>\n          <Field name=\"name\" type=\"text\" placeholder=\"Enter your name\" />\n          <ErrorMessage className={css.errmes} name=\"name\" component=\"p\" />\n          <Field name=\"email\" type=\"email\" placeholder=\"Enter your email\" />\n          <ErrorMessage className={css.errmes} name=\"email\" component=\"div\" />\n          <div className={css.password}>\n            <Field\n              name=\"password\"\n              type={showPassword ? 'text' : 'password'}\n              placeholder=\"Create a password\"\n            />\n            <ErrorMessage\n              className={css.errmes}\n              name=\"password\"\n              component=\"div\"\n            />\n            <span className={css.passwordEye} onClick={toggleShowPassword}>\n              {showPassword ? (\n                <Icon id=\"eye-off\" width=\"18\" height=\"18\"></Icon>\n              ) : (\n                <Icon id=\"eye\" width=\"18\" height=\"18\"></Icon>\n              )}\n            </span>\n          </div>\n        </div>\n        <button className={css.registerButton} type=\"submit\">\n          Register Now\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import * as Yup from 'yup';\n\nconst forgetPassShema = Yup.object().shape({\n  email: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я0-9._%+-]+@[a-zA-Zа-яА-Я0-9.-]+\\.[a-zA-Zа-яА-Я]{2,}$/,\n      'Invalid email format'\n    )\n    .required('Email is required'),\n});\n\nexport default forgetPassShema;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"forgetPass_formContainer__cDYnV\",\"formNav\":\"forgetPass_formNav__mZD3D\",\"register\":\"forgetPass_register__COWzd\",\"login\":\"forgetPass_login__xSfdd\",\"inputContainer\":\"forgetPass_inputContainer__7I+bv\",\"password\":\"forgetPass_password__mJOiH\",\"passwordEye\":\"forgetPass_passwordEye__PtsQz\",\"logInButton\":\"forgetPass_logInButton__zJsNH\",\"errmes\":\"forgetPass_errmes__ZEMoa\"};","import { useDispatch } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { toast } from 'react-toastify';\n\nimport forgetPassShema from './forgetPassShema';\nimport { NavLink } from 'react-router-dom';\n\nimport css from './forgetPass.module.scss';\nimport { forgetPassword } from 'redux/auth/auth-operation';\n\nconst ForgetPass = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (user, { resetForm }) => {\n    try {\n      const response = await dispatch(forgetPassword(user));\n      const data = response.payload.message;\n\n      if (data) {\n        toast.info('Password recovery: Check your email for instructions');\n        resetForm();\n      } else {\n        toast.error('Invalid email address');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{ email: '' }}\n      validationSchema={forgetPassShema}\n    >\n      <Form className={css.formContainer}>\n        <div className={css.formNav}>\n          <NavLink className={css.register} to=\"register\" underline=\"none\">\n            Registration\n          </NavLink>\n          <NavLink className={css.login} to=\"login\" underline=\"none\">\n            Log In\n          </NavLink>\n        </div>\n        <div className={css.inputContainer}>\n          <Field name=\"email\" type=\"email\" placeholder=\"Enter your email\" />\n          <ErrorMessage className={css.errmes} name=\"email\" component=\"div\" />\n        </div>\n        <button className={css.logInButton} type=\"submit\">\n          Send letter\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ForgetPass;\n","// extracted by mini-css-extract-plugin\nexport default {\"welcomeBackground\":\"auth_welcomeBackground__l057L\"};","import * as Yup from 'yup';\n\nconst resetePasswordShema = Yup.object().shape({\n  password: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+,-./:;<=>?@[\\]^_`{|}~]+$/,\n      'Invalid password format'\n    )\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be at most 64 characters')\n    .required('Password is required'),\n});\n\nexport default resetePasswordShema;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"resetePassword_formContainer__iX8mw\",\"formNav\":\"resetePassword_formNav__-1zuz\",\"register\":\"resetePassword_register__83GTW\",\"login\":\"resetePassword_login__q0qPp\",\"inputContainer\":\"resetePassword_inputContainer__xAKNN\",\"password\":\"resetePassword_password__F0raR\",\"passwordEye\":\"resetePassword_passwordEye__TcH-c\",\"logInButton\":\"resetePassword_logInButton__98xNG\",\"errmes\":\"resetePassword_errmes__FGzA0\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { Navigate, useSearchParams } from 'react-router-dom';\n\nimport resetePasswordShema from './resetePasswordShema';\n\nimport Icon from '../../components/icon/Icon';\n\nimport css from './resetePassword.module.scss';\nimport { resetPassword } from 'redux/auth/auth-operation';\n\nconst ResetePassword = () => {\n  const [searchParams] = useSearchParams();\n  const verificationToken = searchParams.get('verificationToken');\n\n  console.log(verificationToken);\n\n  const dispatch = useDispatch();\n  const [finish, setFinish] = useState(false);\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = async (user, { resetForm }) => {\n    console.log(user, 2);\n    dispatch(resetPassword({ user, verificationToken }));\n    resetForm();\n    setFinish(true);\n  };\n\n  return (\n    <>\n      {!verificationToken && verificationToken === '' && <Navigate to=\"/\" />}\n      {finish && <Navigate to=\"/\" />}\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={{ password: '' }}\n        validationSchema={resetePasswordShema}\n      >\n        <Form className={css.formContainer}>\n          <div className={css.inputContainer}>\n            <div className={css.password}>\n              <Field\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                placeholder=\"Confirm a password\"\n              />\n\n              <ErrorMessage\n                className={css.errmes}\n                name=\"password\"\n                component=\"div\"\n              />\n              <span className={css.passwordEye} onClick={toggleShowPassword}>\n                {showPassword ? (\n                  <Icon id=\"eye-off\" width=\"18\" height=\"18\"></Icon>\n                ) : (\n                  <Icon id=\"eye\" width=\"18\" height=\"18\"></Icon>\n                )}\n              </span>\n            </div>\n          </div>\n          <button className={css.logInButton} type=\"submit\">\n            Log In Now\n          </button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default ResetePassword;\n","import { useParams } from 'react-router-dom';\nimport RegisterForm from '../../components/RegisterForm/RegisterForm';\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport ForgetPass from '../../components/forgetPass/forgetPass';\nimport css from './auth.module.scss';\nimport ResetePassword from 'components/resetePassword/resetePassword';\n\nconst Auth = () => {\n  const { id } = useParams();\n\n  return (\n    <>\n      <div className={css.welcomeBackground}>\n        {id === 'register' && <RegisterForm />}\n        {id === 'login' && <LoginForm />}\n        {id === 'forgetPassword' && <ForgetPass />}\n        {id === 'resetePassword' && <ResetePassword />}\n      </div>\n    </>\n  );\n};\nexport default Auth;\n"],"names":["Yup","shape","email","trim","matches","required","password","min","max","dispatch","useDispatch","useState","showPassword","setShowPassword","handleSubmit","user","resetForm","loginUser","response","data","payload","token","toast","console","log","message","onSubmit","initialValues","validationSchema","LoginSchema","className","css","to","underline","name","type","placeholder","component","onClick","Icon","id","width","height","newUser","registerUser","RegisterSchema","forgetPassword","forgetPassShema","useSearchParams","verificationToken","get","finish","setFinish","resetPassword","resetePasswordShema","useParams","LoginForm"],"sourceRoot":""}