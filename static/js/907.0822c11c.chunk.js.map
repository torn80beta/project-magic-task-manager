{"version":3,"file":"static/js/907.0822c11c.chunk.js","mappings":"0OAkBA,EAhBoBA,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KACJG,QACC,iIACA,wBAEDC,SAAS,qBACZC,SAAUL,EAAAA,KACPG,QACC,kDACA,2BAEDG,IAAI,EAAG,0CACPC,IAAI,GAAI,0CACRH,SAAS,0B,iBCfd,EAAgC,iCAAhC,EAA2E,2BAA3E,EAAiH,4BAAjH,EAAqJ,yBAArJ,EAA+L,kCAA/L,EAA4O,4BAA5O,EAAsR,+BAAtR,EAAmU,+BAAnU,EAA2W,0B,mBCkE3W,EA1DkB,WAChB,IAAMI,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAUA,OACE,SAAC,KAAD,CACEC,SANiB,SAACC,EAAD,GAA0B,IAAjBC,EAAgB,EAAhBA,UAC5BP,GAASQ,EAAAA,EAAAA,IAAUF,IACnBC,GACD,EAIGE,cAAe,CAAEf,MAAO,GAAIG,SAAU,IACtCa,iBAAkBC,EAHpB,UAKE,UAAC,KAAD,CAAMC,UAAWC,EAAjB,WACE,iBAAKD,UAAWC,EAAhB,WACE,SAAC,KAAD,CAAMD,UAAWC,EAAcC,GAAG,WAAWC,UAAU,OAAvD,SAA8D,kBAG9D,SAAC,KAAD,CAAMH,UAAWC,EAAWC,GAAG,QAAQC,UAAU,OAAjD,SAAwD,eAI1D,iBAAKH,UAAWC,EAAhB,WACE,SAAC,KAAD,CAAOG,KAAK,QAAQC,KAAK,QAAQC,YAAY,sBAC7C,SAAC,KAAD,CAAcN,UAAWC,EAAYG,KAAK,QAAQG,UAAU,SAC5D,iBAAKP,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEG,KAAK,WACLC,KAAMd,EAAe,OAAS,WAC9Be,YAAY,wBAEd,SAAC,KAAD,CACEN,UAAWC,EACXG,KAAK,WACLG,UAAU,SAEZ,iBAAMP,UAAWC,EAAiBO,QArCjB,WACzBhB,GAAiBD,EAClB,EAmCS,SACGA,GACC,SAACkB,EAAA,EAAD,CAAMC,GAAG,UAAUC,MAAM,KAAKC,OAAO,QAErC,SAACH,EAAA,EAAD,CAAMC,GAAG,MAAMC,MAAM,KAAKC,OAAO,gBAKzC,mBAAQZ,UAAWC,EAAiBI,KAAK,SAAzC,SAAkD,mBAMzD,C","sources":["components/LoginForm/LoginSchema.js","webpack://react-homework-template/./src/components/LoginForm/loginForm.module.scss?0f87","components/LoginForm/LoginForm.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я0-9._%+-]+@[a-zA-Zа-яА-Я0-9.-]+\\.[a-zA-Zа-яА-Я]{2,}$/,\n      'Invalid email format'\n    )\n    .required('Email is required'),\n  password: Yup.string()\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+,-./:;<=>?@[\\]^_`{|}~]+$/,\n      'Invalid password format'\n    )\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be at most 64 characters')\n    .required('Password is required'),\n});\nexport default LoginSchema;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"loginForm_formContainer__oo9nh\",\"formNav\":\"loginForm_formNav__+UHha\",\"register\":\"loginForm_register__T0KTt\",\"login\":\"loginForm_login__ov0uC\",\"inputContainer\":\"loginForm_inputContainer__o1zlG\",\"password\":\"loginForm_password__2FwjM\",\"passwordEye\":\"loginForm_passwordEye__MGAoG\",\"logInButton\":\"loginForm_logInButton__xNZDc\",\"errmes\":\"loginForm_errmes__p36mi\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport LoginSchema from './LoginSchema';\nimport { Link } from 'react-router-dom';\nimport Icon from '../../components/icon/Icon';\nimport css from './loginForm.module.scss';\nimport { loginUser } from 'redux/auth/auth-operation';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = (user, { resetForm }) => {\n    dispatch(loginUser(user));\n    resetForm();\n  };\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{ email: '', password: '' }}\n      validationSchema={LoginSchema}\n    >\n      <Form className={css.formContainer}>\n        <div className={css.formNav}>\n          <Link className={css.register} to=\"register\" underline=\"none\">\n            Registration\n          </Link>\n          <Link className={css.login} to=\"login\" underline=\"none\">\n            Log In\n          </Link>\n        </div>\n        <div className={css.inputContainer}>\n          <Field name=\"email\" type=\"email\" placeholder=\"Enter your email\" />\n          <ErrorMessage className={css.errmes} name=\"email\" component=\"div\" />\n          <div className={css.password}>\n            <Field\n              name=\"password\"\n              type={showPassword ? 'text' : 'password'}\n              placeholder=\"Confirm a password\"\n            />\n            <ErrorMessage\n              className={css.errmes}\n              name=\"password\"\n              component=\"div\"\n            />\n            <span className={css.passwordEye} onClick={toggleShowPassword}>\n              {showPassword ? (\n                <Icon id=\"eye-off\" width=\"18\" height=\"18\"></Icon>\n              ) : (\n                <Icon id=\"eye\" width=\"18\" height=\"18\"></Icon>\n              )}\n            </span>\n          </div>\n        </div>\n        <button className={css.logInButton} type=\"submit\">\n          Log In Now\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n"],"names":["Yup","shape","email","matches","required","password","min","max","dispatch","useDispatch","useState","showPassword","setShowPassword","onSubmit","user","resetForm","loginUser","initialValues","validationSchema","LoginSchema","className","css","to","underline","name","type","placeholder","component","onClick","Icon","id","width","height"],"sourceRoot":""}