{"version":3,"file":"static/js/176.337e6ab6.chunk.js","mappings":"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","sources":["components/filterPopup/FilterPopup.jsx","components/columnForm/ColumnForm.jsx","components/ScreensPage/ScreensPage.jsx","components/modal/PopUp.jsx"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n// import { themeState } from 'redux/theme/themeSlice';\nimport { selectCurrentTheme } from 'redux/auth/auth-slice';\nimport { filterState, changeFilter } from 'redux/filter/filterSlice';\n\nimport './FilterPopup.scss';\n\nconst FilterPopup = () => {\n  const dispatch = useDispatch();\n  const currentTheme = useSelector(selectCurrentTheme);\n  const filter = useSelector(filterState);\n\n  const handleFilter = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  useEffect(() => {\n    const element = document.querySelector(`[value=${filter}]`);\n    element.setAttribute('checked', true);\n  }, [filter]);\n  return (\n    <div className={`theme-${currentTheme} filterPopup`}>\n      <h2 className={`filterPopup_header theme-${currentTheme}`}>Filters</h2>\n      <form className={`filterPopup_radioButtons theme-${currentTheme}`}>\n        <div className={`filterPopup_lineDiv theme-${currentTheme}`}>\n          <h3 className={`filterPopup_title theme-${currentTheme}`}>\n            Label color\n          </h3>\n          <label className={`filterPopup_showAllBtn theme-${currentTheme}`}>\n            <input\n              className={`filterPopup_showAllBtnInput`}\n              type=\"radio\"\n              value=\"all\"\n              name=\"priority\"\n              onChange={handleFilter}\n            />\n            Show all\n          </label>\n        </div>\n\n        <label className={`filterPopup_label theme-${currentTheme}`}>\n          <input\n            type=\"radio\"\n            value=\"without\"\n            name=\"priority\"\n            onChange={handleFilter}\n          />\n          <span className={`filterPopup_without grey`}></span>\n          <span>Without priority</span>\n        </label>\n        <label className={`filterPopup_label theme-${currentTheme}`}>\n          <input\n            type=\"radio\"\n            value=\"low\"\n            name=\"priority\"\n            onChange={handleFilter}\n          />\n          <span className={`filterPopup_without blue`}></span>\n          <span> Low</span>\n        </label>\n        <label className={`filterPopup_label theme-${currentTheme}`}>\n          <input\n            type=\"radio\"\n            value=\"medium\"\n            name=\"priority\"\n            onChange={handleFilter}\n          />\n          <span className={`filterPopup_without pink`}></span>\n          <span> Medium</span>\n        </label>\n        <label className={`filterPopup_label theme-${currentTheme}`}>\n          <input\n            type=\"radio\"\n            value=\"high\"\n            name=\"priority\"\n            onChange={handleFilter}\n          />\n          <span className={`filterPopup_without green`}></span>\n          <span>High</span>\n        </label>\n      </form>\n    </div>\n  );\n};\nexport default FilterPopup;\n","import { selectCurrentTheme } from 'redux/auth/auth-slice';\n\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport Icon from 'components/icon/Icon';\nimport './columnForm.scss';\nimport { useParams } from 'react-router';\n// import { addNewColumn } from 'redux/workplace/workplace-operation';\n// import { editColumnById } from 'redux/workplace/workplace-operation';\n\nconst ColumnForm = props => {\n  // const dispatch = useDispatch();\n  const { title, id, closeModal } = props;\n  const theme = useSelector(selectCurrentTheme);\n  const [error, setError] = useState('');\n  const [columnName, setColumnName] = useState(title || '');\n  const { boardName } = useParams();\n\n  const onSubmit = e => {\n    const InputTitle = e.target.elements.title.value;\n    e.preventDefault();\n\n    if (InputTitle === '') {\n      setError('Required');\n      return;\n    } else if (title && id) {\n      // Edit (PATCH edit column)\n      console.log(`Edit column ${id}`);\n      console.log(id);\n      console.log(InputTitle);\n      closeModal();\n    } else {\n      // dispatch(addNewColumn({ idBoard: boardName, newColumn: InputTitle }));\n      // Add (POST create column)\n      console.log('Add column');\n      console.log(boardName);\n      console.log(InputTitle);\n      closeModal();\n\n      return;\n    }\n    closeModal();\n  };\n\n  return (\n    <form className=\"columnForm\" onSubmit={onSubmit}>\n      <p className={`columnTitle theme-${theme}`}>\n        {!title ? 'Add' : 'Edit'} column\n      </p>\n      <div className=\"columnInputWrapper\">\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          className={`titleInput theme-${theme}`}\n          value={columnName}\n          onChange={e => setColumnName(e.target.value)}\n        />\n        {error && <p className={`errorMessage theme-${theme}`}>{error}</p>}\n      </div>\n      <button className={`columnButton theme-${theme}`} type=\"submit\">\n        <span className={`columnIcon theme-${theme}`}>\n          <Icon id={'plus'} width={14} height={14} />\n        </span>\n        {!title ? 'Add' : 'Edit'}\n      </button>\n    </form>\n  );\n};\n\nexport default ColumnForm;\n","import './screensPage.scss';\nimport PopUp from 'components/modal/PopUp';\n// import { useState } from 'react';\n// import Columns from '../columns/Columns';\nimport Icon from '../icon/Icon';\nimport FilterPopup from 'components/filterPopup/FilterPopup';\n// import { themeState } from 'redux/theme/themeSlice';\nimport {\n  selectCurrentTheme,\n  selectCurrentUserBoards,\n} from 'redux/auth/auth-slice';\nimport { useSelector } from 'react-redux';\nimport ColumnForm from 'components/columnForm/ColumnForm';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n// import { getBoardById } from 'redux/workplace/workplace-operation';\n\n//temporary\n// const columnsArray = [\n//   { title: 'To Do', id: 1 },\n//   { title: 'In progress', id: 2 },\n//   { title: 'Done', id: 3 },\n//   { title: 'Done', id: 4 },\n//   { title: 'Done', id: 5 },\n//   { title: 'Done', id: 6 },\n//   { title: 'Done', id: 7 },\n//   { title: 'Done', id: 8 },\n// ];\n\nconst ScreensPage = () => {\n  const currentTheme = useSelector(selectCurrentTheme);\n  const { boardName } = useParams();\n  const selectedBoards = useSelector(selectCurrentUserBoards);\n  const [boardsList] = useState(selectedBoards);\n  const [currentBoard, setCurrentBoard] = useState(null);\n  // const dispatch = useDispatch(boardsList);\n\n  useEffect(() => {\n    const foundBoard =\n      boardsList && boardsList.find(item => item._id === boardName);\n    // console.log(foundBoard);\n    foundBoard ? setCurrentBoard(foundBoard) : setCurrentBoard(null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [boardsList, boardName]);\n\n  useEffect(() => {\n    // setBoardList(selectedBoards);\n  }, [currentBoard]);\n\n  return (\n    <div className={`theme-${currentTheme} screenPage`}>\n      <div className={`screenPage_header theme-${currentTheme}`}>\n        <h1 className={`screenPage_title theme-${currentTheme}`}>\n          {/* {currentBoardTitle} */}\n        </h1>\n        <PopUp\n          data={\n            <span className={`screenPage_filter theme-${currentTheme}`}>\n              <Icon id={'filter'} width={16} height={16} />\n              <span className={`screenPage_filterText theme-${currentTheme}`}>\n                Filter\n              </span>\n            </span>\n          }\n        >\n          <FilterPopup />\n        </PopUp>\n      </div>\n\n      <div className={`screenPage_canvas theme-${currentTheme}`}>\n        <ul className={`screenPage_columns theme-${currentTheme}`}>\n          {/* {columnsArray.map(item => (\n            <Columns {...item} key={item.id} />\n          ))} */}\n        </ul>\n\n        <PopUp\n          data={\n            <span className={`screenPage_addButton theme-${currentTheme}`}>\n              <span\n                className={`screenPage_addButtonPlus theme-${currentTheme}`}\n              >\n                <Icon id={'plus'} width={14} height={14} />\n              </span>\n              <span\n                className={`screenPage_addButtonText theme-${currentTheme}`}\n              >\n                Add another column\n              </span>\n            </span>\n          }\n        >\n          <ColumnForm />\n        </PopUp>\n      </div>\n    </div>\n  );\n};\n\nexport default ScreensPage;\n","import React from 'react';\nimport Modal from 'react-modal';\nimport Icon from 'components/icon/Icon';\nimport { selectCurrentTheme } from 'redux/auth/auth-slice';\nimport { useSelector } from 'react-redux';\nimport './popup.scss';\n\nModal.setAppElement('#root');\n\nconst PopUp = props => {\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const { children, data } = props;\n  const currentTheme = useSelector(selectCurrentTheme);\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // something after modal open\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function cloneChildren(child) {\n    return React.cloneElement(child, {\n      closeModal,\n    });\n  }\n\n  return (\n    <>\n      <button\n        className={`open-modal-button theme-${currentTheme}`}\n        onClick={openModal}\n      >\n        {data}\n      </button>\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        className={`modal theme-${currentTheme}`}\n        overlayClassName={`modal-overlay theme-${currentTheme}`}\n        contentLabel=\"modal\"\n      >\n        <button\n          className={`close-modal-button theme-${currentTheme}`}\n          onClick={closeModal}\n        >\n          <Icon id=\"x-close\" width={18} height={18} />\n        </button>\n        {cloneChildren(children)}\n      </Modal>\n    </>\n  );\n};\n\nexport default PopUp;\n"],"names":["dispatch","useDispatch","currentTheme","useSelector","selectCurrentTheme","filter","filterState","handleFilter","e","changeFilter","target","value","useEffect","document","querySelector","setAttribute","className","type","name","onChange","props","title","id","closeModal","theme","useState","error","setError","columnName","setColumnName","boardName","useParams","onSubmit","InputTitle","elements","preventDefault","console","log","placeholder","Icon","width","height","selectedBoards","selectCurrentUserBoards","boardsList","currentBoard","setCurrentBoard","foundBoard","find","item","_id","PopUp","data","Modal","child","React","modalIsOpen","setIsOpen","children","onClick","isOpen","onAfterOpen","onRequestClose","overlayClassName","contentLabel"],"sourceRoot":""}